<?xml version="1.0"?>
<project name="build">
	<description>Build the project Ant4C</description>

	<property name="nant.onfailure" value="note_nant_users" />

	<property name="cmake" value="cmake" overwrite="false" />

	<property name="cmake_arch"
			  value="Win32"
			  if="${platform::is-windows()}"
			  unless="${string::equal(platform::is-windows(),
						environment::is64bit-operating-system()))}"
			  overwrite="false" />
	<property name="cmake_arch"
			  value="Win64"
			  if="${string::equal(platform::is-windows(),
					environment::is64bit-operating-system())}"
			  unless="${platform::is-unix()}"
			  overwrite="false" />
	<property name="cmake_arch"
			  value="Win32"
			  if="${platform::is-windows()}"
			  unless="${property::exists('cmake_arch')}" />

	<property name="cmake_generator"
			  value="${string::quote('Visual Studio 16 2019')} -A ${property::get-value('cmake_arch')}"
			  if="${property::exists('VS2019')}"
			  unless="${property::exists('MinGW')}"
			  overwrite="false" />
	<property name="cmake_generator"
			  value="${string::quote('Visual Studio 15 2017')} ${property::get-value('cmake_arch')}"
			  if="${property::exists('VS2017')}"
			  unless="${property::exists('MinGW')}"
			  overwrite="false" />
	<property name="cmake_generator"
			  value="${string::quote('Visual Studio 14 2015')} ${property::get-value('cmake_arch')}"
			  if="${environment::variable-exists('VS140COMNTOOLS')}"
			  unless="${property::exists('MinGW')}"
			  overwrite="false" />
	<property name="cmake_generator"
			  value="${string::quote('Visual Studio 12 2013')} ${property::get-value('cmake_arch')}"
			  if="${environment::variable-exists('VS120COMNTOOLS')}"
			  unless="${property::exists('MinGW')}"
			  overwrite="false" />
	<property name="cmake_generator"
			  value="${string::quote('Eclipse CDT4 - MinGW Makefiles')}"
			  if="${platform::is-windows()}"
			  unless="${property::exists('cmake_generator')}" />
	<property name="cmake_generator"
			  value="${string::quote('Eclipse CDT4 - Unix Makefiles')}"
			  if="${platform::is-unix()}"
			  unless="${property::exists('cmake_generator')}" />

	<property name="cmake_arguments"
			  value="-G ${property::get-value('cmake_generator')}" />
	<property name="cmake_arguments"
			  value="${property::get-value('cmake_arguments')} -T ${property::get-value('cmake_toolset')}"
			  if="${property::exists('cmake_toolset')}" />
	<property name="cmake_arguments"
			  value="${property::get-value('cmake_arguments')} -DCMAKE_BUILD_TYPE=${string::quote('Release')} -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=${string::quote('-j2 -s')}"
			  if="${property::exists('cmake_arguments')}"
			  unless="${string::starts-with(property::get-value('cmake_generator'), 'Visual')}" />
	<property name="cmake_arguments"
			  value="${property::get-value('cmake_arguments')} ${project::get-base-directory()}" />

	<property name="cmake_working_dir"
			  value="${path::get-temp-path()}"
			  overwrite="false" />

	<echo message="${property::get-value('cmake')} ${property::get-value('cmake_arguments')}"
		  level="Verbose" />

	<echo message="Working directory - '${property::get-value('cmake_working_dir')}'"
		  level="Verbose" />

	<exec program="${property::get-value('cmake')}"
		  commandline="${property::get-value('cmake_arguments')}"
		  workingdir="${property::get-value('cmake_working_dir')}" />

	<property name="cmake_target"
			  value="ant4c_app"
			  overwrite="false" />

	<property name="cmake_arguments"
			  value="--build ${string::quote(property::get-value('cmake_working_dir'))} --target ${property::get-value('cmake_target')} --config Release" />

	<echo message="${property::get-value('cmake')} ${property::get-value('cmake_arguments')}"
		  level="Verbose" />

	<exec program="${property::get-value('cmake')}"
		  commandline="${property::get-value('cmake_arguments')}" />

	<target name="note_nant_users">
		<echo level="Error">
			This script not design to run at NAnt environment.
			You can get tool, that accept this script, here https://github.com/TheVice/Ant4C
		</echo>
	</target>

	<target name="run_module">
		<fail unless="${property::exists('module')}" message="property module must be set to run '${target::get-current-target()}' target." />

		<property name="cmake_arguments"
				  value="--build ${string::quote(property::get-value('cmake_working_dir'))} --target ${property::get-value('module')} --config Release" />

		<echo message="${property::get-value('cmake')} ${property::get-value('cmake_arguments')}"
			  level="Verbose" />

		<exec program="${property::get-value('cmake')}"
			  commandline="${property::get-value('cmake_arguments')}"
			  workingdir="${property::get-value('cmake_working_dir')}" />

		<property name="ant4c" unless="${property::exists('ant4c')}" value="${path::combine(cmake_working_dir, 'ant4c')}" />
		<property name="test" value="${path::combine(project::get-base-directory(), property::get-value('module').xml)}" />

		<fail unless="${file::exists(test)}" message="Test file '${test}' not found. Testing of ${module} can not be provided." />

		<property name="cmake_arguments"
				  value="/f:${string::quote(test)}" />

		<echo message="${property::get-value('ant4c')} ${property::get-value('cmake_arguments')}"
			  level="Verbose" />

		<exec program="${property::get-value('ant4c')}"
			  commandline="${property::get-value('cmake_arguments')}"
			  workingdir="${property::get-value('cmake_working_dir')}" />
	</target>

	<target name="run_BOOST_based_module">
		<property name="BOOST_ROOT"
				  unless="${property::exists('BOOST_ROOT')}"
				  if="${environment::variable-exists('BOOST_ROOT')}"
				  value="${path::combine(environment::get-variable('BOOST_ROOT'), '')}" />
		<echo message="${BOOST_ROOT}" level="Verbose" />

		<property name="cmake_arguments"
				  value="-DUSE_BOOST=1 -DBOOST_ROOT=${string::quote(BOOST_ROOT)} ${project::get-base-directory()}" />

		<echo message="${property::get-value('cmake')} ${property::get-value('cmake_arguments')}"
			  level="Verbose" />

		<exec program="${property::get-value('cmake')}"
			  commandline="${property::get-value('cmake_arguments')}"
			  workingdir="${property::get-value('cmake_working_dir')}" />

		<call target="run_module" />
	</target>

	<target name="ant4c.dns">
		<property name="module" value="${target::get-current-target()}" />
		<call target="run_BOOST_based_module" />
	</target>

	<target name="ant4c.regex">
		<property name="module" value="${target::get-current-target()}" />
		<call target="run_BOOST_based_module" />
	</target>
</project>
