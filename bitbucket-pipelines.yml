pipelines:
  default:
    - parallel:

      - step:
          name: Alpine
          image: alpine:latest
          script:
            - apk update
            - apk add alpine-sdk cmake gtest-dev pugixml-dev zstd

            - build_directory=$PWD/build_Debug

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Debug
            - cmake --build $build_directory --config Debug --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - cd $build_directory
            - ctest --build-config Debug --test-dir $build_directory --output-on-failure
            - cd ..
            - if [ ! -d "$PWD/test-results/Debug" ]; then mkdir -p $PWD/test-results/Debug; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Debug
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

            - build_directory=$PWD/build_Release

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Release
            - cmake --build $build_directory --config Release --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - cd $build_directory
            - ctest --build-config Release --test-dir $build_directory --output-on-failure
            - cd ..
            - if [ ! -d "$PWD/test-results/Release" ]; then mkdir -p $PWD/test-results/Release; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Release
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

          artifacts:
            - build*/*.zst

  custom:

    Arch:
      - step:
          name: Arch Linux
          image: archlinux:base-devel
          caches:
            - archlinuxcachepacman
          script:
            - pacman-key --init
            - pacman -Syyu --noconfirm cmake pugixml gtest

            - build_directory=$PWD/build_Debug

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Debug
            - cmake --build $build_directory --config Debug --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - ctest --build-config Debug --test-dir $build_directory --output-on-failure
            - if [ ! -d "$PWD/test-results/Debug" ]; then mkdir -p $PWD/test-results/Debug; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Debug
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

            - build_directory=$PWD/build_Release

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Release
            - cmake --build $build_directory --config Release --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - ctest --build-config Release --test-dir $build_directory --output-on-failure
            - if [ ! -d "$PWD/test-results/Release" ]; then mkdir -p $PWD/test-results/Release; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Release
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

          artifacts:
            - build*/*.zst


    gcc:
      - step:
          name: gcc-latest
          image: gcc:latest
          script:
            - apt update && apt -y install libgtest-dev libpugixml-dev cmake zstd

            - build_directory=$PWD/build_Debug

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Debug
            - cmake --build $build_directory --config Debug --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - cd $build_directory
            - ctest --build-config Debug --test-dir $build_directory --output-on-failure
            - cd ..
            - if [ ! -d "$PWD/test-results/Debug" ]; then mkdir -p $PWD/test-results/Debug; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Debug
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

            - build_directory=$PWD/build_Release

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Release
            - cmake --build $build_directory --config Release --parallel $(nproc)

            - if [ -f "$build_directory/ant4c" ]; then $build_directory/ant4c -help; fi

            - cd $build_directory
            - ctest --build-config Release --test-dir $build_directory --output-on-failure
            - cd ..
            - if [ ! -d "$PWD/test-results/Release" ]; then mkdir -p $PWD/test-results/Release; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Release
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

          artifacts:
            - build*/*.zst

    Mageia:
      - step:
          name: Mageia
          image: mageia:8
          script:
            - dnf update -y
            - dnf install rpmdevtools cmake gtest-devel pugixml-devel -y
            - rpmdev-setuptree

            - cat rpm/ant4c.spec | sed "s/%{_mandir}\/man1\/%{name}.1.gz/%{_mandir}\/man1\/%{name}.1.xz/" > ~/rpmbuild/SPECS/ant4c.spec
            - rpmlint ~/rpmbuild/SPECS/ant4c.spec

            - VERSION=2020.09
            - mkdir v$VERSION

            - cp *.c v$VERSION
            - cp *.cmake v$VERSION
            - cp *.cpp v$VERSION
            - cp *.h v$VERSION
            - cp CHANGELOG v$VERSION
            - cp CMakeLists.txt v$VERSION
            - cp help.adoc v$VERSION
            - cp LICENSE v$VERSION
            - cp MD5SUMS v$VERSION
            - cp README.md v$VERSION
            - cp SHA3-224SUMS v$VERSION
            - cp tests.xml v$VERSION
            - cp ant4c.1.gz v$VERSION
            - cp help.html v$VERSION
            - mkdir -p v$VERSION/modules
            - cp modules/example.cmake v$VERSION/modules
            - cp modules/example.c v$VERSION/modules
            - cp modules/example.h v$VERSION/modules

            - tar cvfz v$VERSION.tar.gz v$VERSION
            - cp v$VERSION.tar.gz ~/rpmbuild/SOURCES/

            - rpmbuild -ba -v ~/rpmbuild/SPECS/ant4c.spec

            - mkdir build
            - cp ~/rpmbuild/SRPMS/ant4c-*.rpm build/
            - cp ~/rpmbuild/RPMS/x86_64/ant4c-*.rpm build/

            - mkdir test-results
            - cp ~/rpmbuild/BUILD/v$VERSION/**/ant4c_tests-report.xml test-results/

          artifacts:
            - build*/*

    dotnet_sdk_6:
      - step:
          name: dotnet_sdk_6.0-jammy
          image: mcr.microsoft.com/dotnet/sdk:6.0-jammy
          script:
            - apt update && apt -y install libgtest-dev libpugixml-dev cmake make gcc g++ zstd

            - source_directory=$PWD/modules/net
            - build_directory=$PWD/build_Debug
            - redist_directory=$build_directory/Redist

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$redist_directory
            - cmake --build $build_directory --config Debug --parallel $(nproc)
            - cmake --build $build_directory --config Debug --parallel $(nproc) --target install

            - if [ -f "$build_directory/CMakeCache.txt_" ]; then rm $build_directory/CMakeCache.txt_; fi
            - mv $build_directory/CMakeCache.txt $build_directory/CMakeCache.txt_

            - cmake -S $source_directory -B $build_directory -DCMAKE_BUILD_TYPE=Debug -DANT4C_PATH=$redist_directory
            - cmake --build $build_directory --config Debug --parallel $(nproc)

            # export COREHOST_TRACE="1"
            # export COREHOST_TRACEFILE="$test_output.txt"

            - ctest --build-config Debug --test-dir $build_directory --output-on-failure
            - if [ ! -d "$PWD/test-results/Debug" ]; then mkdir -p $PWD/test-results/Debug; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Debug
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

            - build_directory=$PWD/build_Release
            - redist_directory=$build_directory/Redist

            - cmake -S $PWD -B $build_directory -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$redist_directory
            - cmake --build $build_directory --config Release --parallel $(nproc)
            - cmake --build $build_directory --config Release --parallel $(nproc) --target install

            - if [ -f "$build_directory/CMakeCache.txt_" ]; then rm $build_directory/CMakeCache.txt_; fi
            - mv $build_directory/CMakeCache.txt $build_directory/CMakeCache.txt_

            - cmake -S $source_directory -B $build_directory -DCMAKE_BUILD_TYPE=Release -DANT4C_PATH=$redist_directory
            - cmake --build $build_directory --config Release --parallel $(nproc)

            - cd $build_directory

            # export COREHOST_TRACE="1"
            # export COREHOST_TRACEFILE="$test_output.txt"

            - ctest --build-config Release --test-dir $build_directory --output-on-failure
            - if [ ! -d "$PWD/test-results/Release" ]; then mkdir -p $PWD/test-results/Release; fi
            - cp $build_directory/*-report.xml $PWD/test-results/Release
            - for i in $build_directory/*; do if [ -f "$i" ]; then zstd --ultra -22 $i -o $i.zst -f; fi; done

          artifacts:
            - build*/*.zst

    openSUSE:
      - step:
          name: openSUSE
          image: opensuse/leap:15
          # image: opensuse/tumbleweed
          script:
            # - zypper update -y
            - zypper install -y rpmdevtools rpmlint tar gzip rpm-build cmake gcc-c++ gtest pugixml-devel
            - rpmdev-setuptree

            - cat rpm/ant4c.spec | sed "s/gtest-devel/gtest/" > ~/rpmbuild/SPECS/ant4c.spec
            - rpmlint ~/rpmbuild/SPECS/ant4c.spec

            - VERSION=2020.09
            - mkdir v$VERSION

            - cp *.c v$VERSION
            - cp *.cmake v$VERSION
            - cp *.cpp v$VERSION
            - cp *.h v$VERSION
            - cp CHANGELOG v$VERSION
            - cp CMakeLists.txt v$VERSION
            - cp help.adoc v$VERSION
            - cp LICENSE v$VERSION
            - cp MD5SUMS v$VERSION
            - cp README.md v$VERSION
            - cp SHA3-224SUMS v$VERSION
            - cp tests.xml v$VERSION
            - cp ant4c.1.gz v$VERSION
            - cp help.html v$VERSION
            - mkdir -p v$VERSION/modules
            - cp modules/example.cmake v$VERSION/modules
            - cp modules/example.c v$VERSION/modules
            - cp modules/example.h v$VERSION/modules

            - tar cvfz v$VERSION.tar.gz v$VERSION
            - cp v$VERSION.tar.gz ~/rpmbuild/SOURCES/

            - rpmbuild -ba -v ~/rpmbuild/SPECS/ant4c.spec

            - mkdir build
            - cp ~/rpmbuild/SRPMS/ant4c-*.rpm build/
            - cp ~/rpmbuild/RPMS/x86_64/ant4c-*.rpm build/

            - mkdir test-results
            - cp ~/rpmbuild/BUILD/v$VERSION/**/ant4c_tests-report.xml test-results/

          artifacts:
            - build*/*

definitions:
  caches:
    archlinuxcachepacman: /var/cache/pacman
