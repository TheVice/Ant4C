name: CMake

# on: [push, pull_request]
on:
  push:
    branches:
    - develop

    paths:
    - '**.c'
    - '**.cmake'
    - '**.cpp'
    - '**.h'
    - 'CMakeLists.txt'

  pull_request:
    branches:
    - develop

    paths:
    - '**.c'
    - '**.cmake'
    - '**.cpp'
    - '**.h'
    - 'CMakeLists.txt'

jobs:
  build:
    name: >-
      ${{ github.ref_name }}
      ${{ matrix.os }}
      ${{ matrix.compiler }}
      ${{ matrix.optimized && 'release' || 'debug' }}
      ${{ matrix.target_platform }}

    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc, msvc, mingw]
        os: [ubuntu-latest, macos-latest, windows-latest]
        optimized: [true, false]
        target_platform: [x64, Win32]
        exclude:

        - os: ubuntu-latest
          compiler: clang
        - os: ubuntu-latest
          compiler: msvc
        - os: ubuntu-latest
          compiler: mingw
        - os: ubuntu-latest
          target_platform: Win32

        - os: macos-latest
          compiler: gcc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: mingw
        - os: macos-latest
          target_platform: Win32

        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc

        - compiler: mingw
          target_platform: Win32

    env:
      CMAKE_BUILD_DIR: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\build' || '{0}/build',
            github.workspace) }}
      CMAKE_GENERATOR: ${{ 'mingw' == matrix.compiler && '-G "MinGW Makefiles"' || '' }}
      CMAKE_BUILD_TYPE: >-
        ${{ format(
            'msvc' == matrix.compiler && '' || '-DCMAKE_BUILD_TYPE={0}',
            (matrix.optimized && 'Release' || 'Debug')) }}
      CMAKE_CONFIG_TYPE: ${{ matrix.optimized && 'Release' || 'Debug' }}
      CMAKE_TARGET_PLATFORM: >-
        ${{ format(
            'msvc' == matrix.compiler && '-A {0}' || '',
            matrix.target_platform) }}
      EXECUTABLE_EXTENSION: ${{ startsWith(matrix.os, 'windows') && '.exe' || '' }}
      BINARY_PATH: >-
        ${{ format(
              ('msvc' == matrix.compiler && '{0}\build\{1}\') ||
              (startsWith(matrix.os, 'windows') && '{0}\build\' || '{0}/build/'),
            github.workspace,
            matrix.optimized && 'Release' || 'Debug') }}
      LIBRARY_BINARY_DIR: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\{1}' || '{0}/{1}',
            github.workspace, matrix.os) }}
      TESTS_XML: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\tests.xml' || '{0}/tests.xml',
            github.workspace) }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Fetch prebuild of third-party libraries
      run: git fetch origin ${{ matrix.os }}

    - name: Checkout third-party libraries
      run: git checkout origin/${{ matrix.os }} -- .

    - name: Create project files
      run: >-
        cmake
        ${{ env.CMAKE_TARGET_PLATFORM }}
        ${{ env.CMAKE_GENERATOR }}
        ${{ env.CMAKE_BUILD_TYPE }}
        -S ${{ github.workspace }}
        -B ${{ env.CMAKE_BUILD_DIR }}
        -DLIBRARY_BINARY_DIR=${{ env.LIBRARY_BINARY_DIR }}
        -DPROGRAM_VERSION="${{ github.event.repository.updated_at }}"

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores

    - name: Build
      run: >-
        cmake
        --build ${{ env.CMAKE_BUILD_DIR }}
        --config ${{ env.CMAKE_CONFIG_TYPE }}
        --parallel ${{ steps.cpu-cores.outputs.count }}

    - name: Run main application
      run: ${{ env.BINARY_PATH }}ant4c${{ env.EXECUTABLE_EXTENSION }}

    - name: Add libraries to the folder with application that was made with MinGW
      if: ${{ 'mingw' == matrix.compiler }}
      run: |
        $path = "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\bin\cpp.exe"
        if(Test-Path -Path $path)
        {
          $argument = "--version"
          $source = "$env:TEMP\1.txt"
          Start-Process -FilePath $path -ArgumentList $argument -NoNewWindow -Wait -RedirectStandardOutput $source
          $source = [System.IO.File]::ReadAllLines($source)[0]
          $argument = $source.LastIndexOf(" ")
          $argument++
          $source = $source.Substring($argument)
          $ver = [System.Version]::Parse($source)
          if([System.Version]::Parse("9.0") -le $ver)
          {
            Write-Warning -Message "Patch will be apply."
            $path = "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\bin\libstdc++-6.dll"
            if(Test-Path -Path $path)
            {
              cp $path ${{ env.BINARY_PATH }}
            }
            else
            {
              Write-Warning -Message $path
            }
            $path = "C:\ProgramData\Chocolatey\lib\mingw\tools\install\mingw64\bin\libgcc_s_seh-1.dll"
            if(Test-Path -Path $path)
            {
              cp $path ${{ env.BINARY_PATH }}
            }
            else
            {
              Write-Warning -Message $path
            }
          }
          else
          {
            Write-Host "Nothing to do."
          }
        }

    - name: Run tests
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        if (Test-Path -Path "${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }}")
        {
          ${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }} --tests_xml=${{ env.TESTS_XML }} --tests_exec_app=${{ env.BINARY_PATH }}tests_exec_app${{ env.EXECUTABLE_EXTENSION }} --tests_base_directory=${{ github.workspace }}
        }
        else
        {
          Write-Warning -Message ("File '{0}' not exists. Tests will not run." -f "${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }}")
          Get-ChildItem -Path "${{ env.BINARY_PATH }}" -Recurse
        }

    - name: Run tests_ant4c.net.framework.module
      if: ${{ 'msvc' == matrix.compiler }}
      working-directory: ${{ env.CMAKE_BUILD_DIR }}
      run: |
        if (Test-Path -Path "${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }}")
        {
          ${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }} --tests_xml=${{ github.workspace }}\tests.xml --tests_exec_app=${{ env.BINARY_PATH }}tests_exec_app${{ env.EXECUTABLE_EXTENSION }} --tests_base_directory=${{ github.workspace }}
        }
        else
        {
          Write-Warning -Message ("File '{0}' not exists. Tests will not run." -f "${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }}")
          Get-ChildItem -Path "${{ env.BINARY_PATH }}" -Recurse
        }

    - name: Compress files with zstd
      shell: pwsh
      run: |
        $paths = Get-ChildItem -File -Path ${{ env.BINARY_PATH }}
        ForEach ($path in $paths)
        {
          $outputPath = [System.String]::Format("{0}.zst", $path.FullName)
          & "zstd" --ultra -22 $path.FullName -o $outputPath
        }

    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.optimized && 'release' || 'debug' }}-${{ matrix.target_platform }}
        retention-days: 1
        path: ${{ env.BINARY_PATH }}/*.zst

