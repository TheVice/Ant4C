name: CMake

# on: [push, pull_request]
on:
  push:
    branches:
    - develop

    paths:
    - '**.c'
    - '**.cmake'
    - '**.cpp'
    - '**.h'
    - 'CMakeLists.txt'

  pull_request:
    branches:
    - develop

    paths:
    - '**.c'
    - '**.cmake'
    - '**.cpp'
    - '**.h'
    - 'CMakeLists.txt'

jobs:
  build:
    name: >-
      ${{ github.ref_name }}
      ${{ matrix.os }}
      ${{ matrix.compiler }}
      ${{ matrix.optimized && 'release' || 'debug' }}
      ${{ matrix.target_platform }}

    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc, msvc, mingw]
        os: [ubuntu-latest, macos-latest, windows-latest]
        optimized: [true, false]
        target_platform: [x64, Win32]
        exclude:

        - os: ubuntu-latest
          compiler: clang
        - os: ubuntu-latest
          compiler: msvc
        - os: ubuntu-latest
          compiler: mingw
        - os: ubuntu-latest
          target_platform: Win32

        - os: macos-latest
          compiler: gcc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: mingw
        - os: macos-latest
          target_platform: Win32

        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc

        - compiler: mingw
          target_platform: Win32

    env:
      CMAKE_BUILD_DIR: >-
        ${{ format(
            startsWith('windows', matrix.os) && '{0}\build' || '{0}/build',
            github.workspace) }}
      CMAKE_BUILD_TYPE: ${{ matrix.optimized && 'Release' || 'Debug' }}
      CMAKE_TARGET_PLATFORM: >-
        ${{ format(
            'msvc' == matrix.compiler && '-A {0}' || '',
            matrix.target_platform) }}
      EXECUTABLE_EXTENSION: ${{ startsWith('windows', matrix.os) && '.exe' || '' }}
      BINARY_PATH: >-
        ${{ format(
            'msvc' == matrix.compiler && '{0}\build\{1}\' || '{0}/build/',
            github.workspace,
            matrix.optimized && 'Release' || 'Debug') }}
      TESTS_XML: >-
        ${{ format(
            startsWith('windows', matrix.os) && '{0}\tests.xml' || '{0}/tests.xml',
            github.workspace) }}
      GENERATOR: ${{ 'mingw' == matrix.compiler && '-G "MinGW Makefiles"' || '' }}
      LIBRARY_BINARY_DIR: >-
        ${{ format(
            startsWith('windows', matrix.os) && '{0}\{1}' || '{0}/{1}',
            github.workspace, matrix.os) }}

    runs-on: ${{ matrix.os }}

    steps:

    # - name: Download and unpack Google Test
    #   if: ${{ 'Windows' == runner.os }}
    #   run: |
    #     $url = "https://github.com/google/googletest/archive/refs/tags/release-1.8.1.tar.gz"
    #     (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\googletest.tar.gz")
    #     mkdir "$env:TEMP\googletest"
    #     tar -xzf "$env:TEMP\googletest.tar.gz" -C "$env:TEMP\googletest"

    # - name: Download and unpack pugixml
    #   if: ${{ 'Windows' == runner.os }}
    #   run: |
    #     $url = "https://github.com/zeux/pugixml/releases/download/v1.9/pugixml-1.9.tar.gz"
    #     (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\pugixml.tar.gz")
    #     mkdir "$env:TEMP\pugixml"
    #     tar -xzf "$env:TEMP\pugixml.tar.gz" -C "$env:TEMP\pugixml"

    # - name: Download and unpack Google Test
    #   if: ${{ 'Windows' != runner.os }}
    #   shell: pwsh
    #   run: |
    #     $url = "https://github.com/google/googletest/archive/refs/tags/release-1.8.1.tar.gz"
    #     (New-Object System.Net.WebClient).DownloadFile($url, "/tmp/googletest.tar.gz")
    #     mkdir "/tmp/googletest"
    #     tar -xzf "/tmp/googletest.tar.gz" -C "/tmp/googletest"

    # - name: Download and unpack pugixml
    #   if: ${{ 'Windows' != runner.os }}
    #   shell: pwsh
    #   run: |
    #     $url = "https://github.com/zeux/pugixml/releases/download/v1.9/pugixml-1.9.tar.gz"
    #     (New-Object System.Net.WebClient).DownloadFile($url, "/tmp/pugixml.tar.gz")
    #     mkdir "/tmp/pugixml"
    #     tar -xzf "/tmp/pugixml.tar.gz" -C "/tmp/pugixml"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch prebuild of third-party libraries
      run: git fetch origin ${{ matrix.os }}

    - name: Checkout third-party libraries
      run: git checkout origin/${{ matrix.os }} -- .

    - name: Create Build Environment
      run: cmake -E make_directory ${{ env.CMAKE_BUILD_DIR }}

    - name: Create project files
      run: >-
        cmake ${{ env.CMAKE_TARGET_PLATFORM }} ${{ env.GENERATOR }}
        -S ${{ github.workspace }} -B ${{ env.CMAKE_BUILD_DIR }}
        -DLIBRARY_BINARY_DIR=${{ env.LIBRARY_BINARY_DIR }}

    - name: Build
      run: >-
        cmake --build ${{ env.CMAKE_BUILD_DIR }}
        --config ${{ env.CMAKE_BUILD_TYPE }}

    - name: Run main application
      run: ${{ env.BINARY_PATH }}ant4c${{ env.EXECUTABLE_EXTENSION }}

    - name: Run tests
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        if (Test-Path -Path "${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }}")
        {
          ${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }} --tests_xml=${{ env.TESTS_XML }} --tests_exec_app=${{ env.BINARY_PATH }}tests_exec_app${{ env.EXECUTABLE_EXTENSION }} --tests_base_directory=${{ github.workspace }}
        }
        else
        {
          Write-Warning -Message ("File '{0}' not exists. Tests will not run." -f "${{ env.BINARY_PATH }}ant4c_tests${{ env.EXECUTABLE_EXTENSION }}")
          Get-ChildItem -Path "${{ env.BINARY_PATH }}" -Recurse
        }

    - name: Run tests_ant4c.net.framework.module
      if: ${{ 'msvc' == matrix.compiler }}
      working-directory: ${{ env.CMAKE_BUILD_DIR }}
      run: |
        if (Test-Path -Path "${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }}")
        {
          ${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }} --tests_xml=${{ github.workspace }}\tests.xml --tests_exec_app=${{ env.BINARY_PATH }}tests_exec_app${{ env.EXECUTABLE_EXTENSION }} --tests_base_directory=${{ github.workspace }}
        }
        else
        {
          Write-Warning -Message ("File '{0}' not exists. Tests will not run." -f "${{ env.BINARY_PATH }}tests_ant4c.net.framework.module${{ env.EXECUTABLE_EXTENSION }}")
          Get-ChildItem -Path "${{ env.BINARY_PATH }}" -Recurse
        }

    - name: Upload binaries
      uses: actions/upload-artifact@v2.3.1
      with:
        name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.optimized && 'release' || 'debug' }}-${{ matrix.target_platform }}
        path: ${{ env.BINARY_PATH }}
        retention-days: 1
