name: modules_net_CMake

# on: [push, pull_request]
on:
  push:
    branches:
    - develop

    paths:
    - 'tests_net.module.cpp'
    - 'tests.cmake'
    - 'modules/net/*.c'
    - 'modules/net/*.cs'
    - 'modules/net/*.csproj'
    - 'modules/net/*.h'
    - 'modules/net/*.xml'
    - 'modules/net/CMakeLists.txt'

  pull_request:
    branches:
    - develop

    paths:
    - 'tests_net.module.cpp'
    - 'tests.cmake'
    - 'modules/net/*.c'
    - 'modules/net/*.cs'
    - 'modules/net/*.csproj'
    - 'modules/net/*.h'
    - 'modules/net/*.xml'
    - 'modules/net/CMakeLists.txt'

jobs:
  build:
    name: >-
      ${{ github.ref_name }}
      ${{ matrix.os }}
      ${{ matrix.compiler }}
      ${{ matrix.optimized && 'release' || 'debug' }}
      ${{ matrix.target_platform }}

    strategy:
      matrix:

        compiler: [clang, gcc, msvc, mingw]
        os: [ubuntu-latest, macos-latest, windows-latest]
        # optimized: [true, false]
        # target_platform: [x64, Win32]
        optimized: [true]
        target_platform: [x64]

        exclude:

        - os: ubuntu-latest
          compiler: clang
        - os: ubuntu-latest
          compiler: msvc
        - os: ubuntu-latest
          compiler: mingw
        - os: ubuntu-latest
          target_platform: Win32

        - os: macos-latest
          compiler: gcc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: mingw
        - os: macos-latest
          target_platform: Win32

        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc

        - compiler: mingw
          target_platform: Win32

    env:
      CMAKE_BUILD_DIR: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\build' || '{0}/build',
            github.workspace) }}
      CMAKE_GENERATOR: ${{ 'mingw' == matrix.compiler && '-G "MinGW Makefiles"' || '' }}
      CMAKE_BUILD_TYPE: >-
        ${{ format(
            'msvc' == matrix.compiler && '' || '-DCMAKE_BUILD_TYPE={0}',
            (matrix.optimized && 'Release' || 'Debug')) }}
      CMAKE_CONFIG_TYPE: ${{ matrix.optimized && 'Release' || 'Debug' }}
      CMAKE_TARGET_PLATFORM: >-
        ${{ format(
            'msvc' == matrix.compiler && '-A {0}' || '',
            matrix.target_platform) }}
      LIBRARY_BINARY_DIR: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\{1}' || '{0}/{1}',
            github.workspace, matrix.os) }}
      TESTS_XML: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\tests.xml' || '{0}/tests.xml',
            github.workspace) }}
      NET_XML: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\modules\net\net.xml' || '{0}/modules/net/net.xml',
            github.workspace) }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Fetch prebuild of third-party libraries
      run: git fetch origin ${{ matrix.os }}

    - name: Checkout third-party libraries
      run: git checkout origin/${{ matrix.os }} -- .

    - name: Create project files (main project)
      run: >-
        cmake
        ${{ env.CMAKE_TARGET_PLATFORM }}
        ${{ env.CMAKE_GENERATOR }}
        ${{ env.CMAKE_BUILD_TYPE }}
        -S ${{ github.workspace }}
        -B ${{ env.CMAKE_BUILD_DIR }}
        -DLIBRARY_BINARY_DIR=${{ env.LIBRARY_BINARY_DIR }}
        -DPROGRAM_VERSION="${{ github.event.repository.updated_at }}"
        -DCMAKE_INSTALL_PREFIX=${{ env.CMAKE_BUILD_DIR }}/Redist

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores

    - name: Install redist
      run: >-
        cmake
        --build ${{ env.CMAKE_BUILD_DIR }}
        --config ${{ env.CMAKE_CONFIG_TYPE }}
        --parallel ${{ steps.cpu-cores.outputs.count }}
        --target install

    - name: Deal with CMakeCache.txt
      run: mv ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt_

    - name: Create project files (module)
      run: >-
        cmake
        ${{ env.CMAKE_TARGET_PLATFORM }}
        ${{ env.CMAKE_GENERATOR }}
        ${{ env.CMAKE_BUILD_TYPE }}
        -S ${{ github.workspace }}
        -B ${{ env.CMAKE_BUILD_DIR }}
        -DLIBRARY_BINARY_DIR=${{ env.LIBRARY_BINARY_DIR }}
        -DANT4C_PATH=${{ env.CMAKE_BUILD_DIR }}/Redist

    - name: Build
      run: >-
        cmake
        --build ${{ env.CMAKE_BUILD_DIR }}
        --config ${{ env.CMAKE_CONFIG_TYPE }}
        --parallel ${{ steps.cpu-cores.outputs.count }}

    - name: Compress files with zstd
      shell: pwsh
      run: |
        $paths = Get-ChildItem -Recurse -File -Path ${{ env.CMAKE_BUILD_DIR }}
        ForEach ($path in $paths)
        {
          $outputPath = [System.String]::Format("{0}.zst", $path.FullName)
          & "zstd" --ultra -22 $path.FullName -o $outputPath
        }

    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.optimized && 'release' || 'debug' }}-${{ matrix.target_platform }}
        retention-days: 1
        path: |
          ${{ github.workspace }}/modules/net/*.csproj
          ${{ github.workspace }}/modules/net/*.cs
          ${{ env.CMAKE_BUILD_DIR }}/**/*.zst
          ${{ env.TESTS_XML }}
          ${{ env.NET_XML }}

  run:
    needs: build
    name: >-
      ${{ github.ref_name }}
      ${{ matrix.os }}
      ${{ matrix.compiler }}
      ${{ matrix.optimized && 'release' || 'debug' }}
      ${{ matrix.target_platform }}
      ${{ matrix.host_version }}

    strategy:
      matrix:
        compiler: [clang, gcc, msvc, mingw]
        os: [ubuntu-latest, macos-latest, windows-latest]
        # optimized: [true, false]
        # target_platform: [x64, Win32]
        host_version: [ "3.1", "6.0" ]

        optimized: [true]
        target_platform: [x64]

        exclude:

        - os: ubuntu-latest
          compiler: clang
        - os: ubuntu-latest
          compiler: msvc
        - os: ubuntu-latest
          compiler: mingw
        - os: ubuntu-latest
          target_platform: Win32

        - os: macos-latest
          compiler: gcc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: mingw
        - os: macos-latest
          target_platform: Win32

        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc

        - compiler: mingw
          target_platform: Win32

        - os: ubuntu-latest
          host_version: "6.0"
        - os: macos-latest
          host_version: "6.0"

    env:
      BINARY_PATH: >-
        ${{ format(
            startsWith(matrix.os, 'windows') &&
            '{0}\build' || '{0}/build',
            github.workspace) }}
      EXECUTABLE: >-
        ${{ format(
            startsWith(matrix.os, 'windows') &&
              ( matrix.compiler == 'msvc' &&
                ( matrix.optimized && '& {0}\build\Release\{1}' || '& {0}\build\Debug\{1}' ) ||
                ( '& {0}\build\{1}' )
              ) ||
              ( '{0}/build/{1}' ),
            github.workspace, 'tests_net.module') }}
      TESTS_XML: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\tests.xml' || '{0}/tests.xml',
            github.workspace) }}
      NET_XML: >-
        ${{ format(
            startsWith(matrix.os, 'windows') && '{0}\modules\net\net.xml' || '{0}/modules/net/net.xml',
            github.workspace) }}
      # TARGET: ${{ startsWith(matrix.os, 'windows') && '& .\tests_net.module.exe' || 'tests_net.module' }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.optimized && 'release' || 'debug' }}-${{ matrix.target_platform }}

    - name: Uncompress zstd file
      shell: pwsh
      run: |
        $paths = Get-ChildItem -Recurse -File -Filter *.zst -Path ${{ github.workspace }}
        ForEach ($path in $paths)
        {
          & "zstd" -d $path.FullName
        }

    - name: chmod
      if: ${{ 'Windows' != runner.os }}
      run: >-
        chmod +x ${{ env.EXECUTABLE }}

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ matrix.host_version }}

    - name: Run Tests
      working-directory: ${{ env.BINARY_PATH }}
      run: >-
        ${{ env.EXECUTABLE }}
        --tests_xml=${{ env.TESTS_XML }}
        --build_file=${{ env.NET_XML }}
        -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}"
        --dotnet_root="${{ env.DOTNET_ROOT }}"
        --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_initialize_for_dotnet_command_line
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_initialize_for_dotnet_command_line="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_initialize_for_runtime_config
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_initialize_for_runtime_config="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_run_app
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_run_app="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_get_runtime_properties
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_get_runtime_properties="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_get_runtime_property_value
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_get_runtime_property_value="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_set_runtime_property_value
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_set_runtime_property_value="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_get_runtime_delegate
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_get_runtime_delegate="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_set_error_writer
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_set_error_writer="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_hostfxr_main_bundle_startupinfo
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_hostfxr_main_bundle_startupinfo="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: test_file_is_assembly
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:test_file_is_assembly="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: core_host_main
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:core_host_main="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: core_host_main_with_output_buffer
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:core_host_main_with_output_buffer="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*

    - name: core_host_initialize
      shell: pwsh
      working-directory: ${{ env.BINARY_PATH }}
      run: |
        $env:test_hostfxr_="1"
        $env:core_host_initialize="1"
        ${{ env.EXECUTABLE }} --tests_xml=${{ env.TESTS_XML }} --build_file=${{ env.NET_XML }} -D:DOTNET_ROOT="${{ env.DOTNET_ROOT }}" --dotnet_root="${{ env.DOTNET_ROOT }}" --gtest_filter=TestNetModuleViaBuildFile*
